"use strict";(self.webpackChunkpanman=self.webpackChunkpanman||[]).push([[187],{7940:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>l});var o=t(4848),s=t(8453);const i={},r="A note on security",a={id:"A note on security",title:"A note on security",description:"1.  Although pandoc itself will not create or modify any files other",source:"@site/docs/A note on security.md",sourceDirName:".",slug:"/A note on security",permalink:"/panman/A note on security",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Running pandoc as a Lua interpreter",permalink:"/panman/Running pandoc as a Lua interpreter"},next:{title:"Authors",permalink:"/panman/Authors"}},c={},l=[];function d(e){const n={a:"a",code:"code",h1:"h1",li:"li",ol:"ol",p:"p",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"a-note-on-security",children:"A note on security"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Although pandoc itself will not create or modify any files other\nthan those you explicitly ask it create (with the exception of\ntemporary files used in producing PDFs), a filter or custom writer\ncould in principle do anything on your file system. Please audit\nfilters and custom writers very carefully before using them."}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["Several input formats (including LaTeX, Org, RST, and Typst) support\n",(0,o.jsx)(n.code,{children:"include"})," directives that allow the contents of a file to be\nincluded in the output. An untrusted attacker could use these to\nview the contents of files on the file system. (Using the\n",(0,o.jsx)(n.code,{children:"--sandbox"})," option can protect against this threat.)"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["Several output formats (including RTF, FB2, HTML with\n",(0,o.jsx)(n.code,{children:"--self-contained"}),", EPUB, Docx, and ODT) will embed encoded or raw\nimages into the output file. An untrusted attacker could exploit\nthis to view the contents of non-image files on the file system.\n(Using the ",(0,o.jsx)(n.code,{children:"--sandbox"})," option can protect against this threat, but\nwill also prevent including images in these formats.)"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["In reading HTML files, pandoc will attempt to include the contents\nof ",(0,o.jsx)(n.code,{children:"iframe"})," elements by fetching content from the local file or URL\nspecified by ",(0,o.jsx)(n.code,{children:"src"}),". If untrusted HTML is processed on a server, this\nhas the potential to reveal anything readable by the process running\nthe server. Using the ",(0,o.jsx)(n.code,{children:"-f html+raw_html"})," will mitigate this threat\nby causing the whole ",(0,o.jsx)(n.code,{children:"iframe"})," to be parsed as a raw HTML block.\nUsing `\u2013sandbox will also protect against the threat."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["If your application uses pandoc as a Haskell library (rather than\nshelling out to the executable), it is possible to use it in a mode\nthat fully isolates pandoc from your file system, by running the\npandoc operations in the ",(0,o.jsx)(n.code,{children:"PandocPure"})," monad. See the document ",(0,o.jsx)(n.a,{href:"https://pandoc.org/using-the-pandoc-api.html",children:"Using\nthe pandoc API"})," for\nmore details. (This corresponds to the use of the ",(0,o.jsx)(n.code,{children:"--sandbox"})," option\non the command line.)"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["Pandoc\u2019s parsers can exhibit pathological performance on some corner\ncases. It is wise to put any pandoc operations under a timeout, to\navoid DOS attacks that exploit these issues. If you are using the\npandoc executable, you can add the command line options\n",(0,o.jsx)(n.code,{children:"+RTS -M512M -RTS"})," (for example) to limit the heap size to 512MB.\nNote that the ",(0,o.jsx)(n.code,{children:"commonmark"})," parser (including ",(0,o.jsx)(n.code,{children:"commonmark_x"})," and\n",(0,o.jsx)(n.code,{children:"gfm"}),") is much less vulnerable to pathological performance than the\n",(0,o.jsx)(n.code,{children:"markdown"})," parser, so it is a better choice when processing\nuntrusted input."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["The HTML generated by pandoc is not guaranteed to be safe. If\n",(0,o.jsx)(n.code,{children:"raw_html"})," is enabled for the Markdown input, users can inject\narbitrary HTML. Even if ",(0,o.jsx)(n.code,{children:"raw_html"})," is disabled, users can include\ndangerous content in URLs and attributes. To be safe, you should run\nall HTML generated from untrusted user input through an HTML\nsanitizer."]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var o=t(6540);const s={},i=o.createContext(s);function r(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);