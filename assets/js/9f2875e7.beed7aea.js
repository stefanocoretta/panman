"use strict";(self.webpackChunkpanman=self.webpackChunkpanman||[]).push([[268],{3374:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>a,toc:()=>c});var r=t(5893),i=t(1151);const s={},o="Authors",a={id:"Authors",title:"Authors",description:"Copyright 2006\u20132022 John MacFarlane (jgm@berkeley.edu). Released under",source:"@site/docs/Authors.md",sourceDirName:".",slug:"/Authors",permalink:"/panman/Authors",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"A note on security",permalink:"/panman/A note on security"}},l={},c=[];function h(e){const n={a:"a",code:"code",h1:"h1",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"authors",children:"Authors"}),"\n",(0,r.jsxs)(n.p,{children:["Copyright 2006\u20132022 John MacFarlane (",(0,r.jsx)(n.a,{href:"mailto:jgm@berkeley.edu",children:"jgm@berkeley.edu"}),"). Released under\nthe\n",(0,r.jsx)(n.a,{href:"https://www.gnu.org/copyleft/gpl.html",title:"GNU General Public License",children:"GPL"}),",\nversion 2 or greater. This software carries no warranty of any kind.\n(See COPYRIGHT for full copyright and warranty notices.) For a full list\nof contributors, see the file AUTHORS.md in the pandoc source code."]}),"\n",(0,r.jsx)(n.p,{children:"[1] The point of this rule is to ensure that normal paragraphs starting\nwith people\u2019s initials, like"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'B. Russell won a Nobel Prize (but not for "On Denoting").\n'})}),"\n",(0,r.jsx)(n.p,{children:"do not get treated as list items."}),"\n",(0,r.jsx)(n.p,{children:"This rule will not prevent"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"(C) 2007 Joe Smith\n"})}),"\n",(0,r.jsx)(n.p,{children:"from being interpreted as a list item. In this case, a backslash escape\ncan be used:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"(C\\) 2007 Joe Smith\n"})}),"\n",(0,r.jsxs)(n.p,{children:["[2] I have been influenced by the suggestions of ",(0,r.jsx)(n.a,{href:"https://justatheory.com/2009/02/modest-markdown-proposal/",children:"David\nWheeler"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["[3] This scheme is due to Michel Fortin, who proposed it on the\n",(0,r.jsx)(n.a,{href:"http://six.pairlist.net/pipermail/markdown-discuss/2005-March/001097.html",children:"Markdown discussion\nlist"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"[4] To see why laziness is incompatible with relaxing the requirement of\na blank line between items, consider the following example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"bar\n:    definition\nfoo\n:    definition\n"})}),"\n",(0,r.jsx)(n.p,{children:"Is this a single list item with two definitions of \u201cbar,\u201d the first of\nwhich is lazily wrapped, or two list items? To remove the ambiguity we\nmust either disallow lazy wrapping or require a blank line between list\nitems."})]})}function d(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>a,a:()=>o});var r=t(7294);const i={},s=r.createContext(i);function o(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);